name: Build OSX

on:
  workflow_call:
    inputs:
      official:
        required: true
        type: boolean
      runs-on:
        description: 'Extra runner tags'
        type: string
        required: false
    secrets:
      APPLE_DEV_P12_BASE64:
        required: true
      APPLE_INS_P12_BASE64:
        required: true
      APPLE_DEV_PASSWORD:
        required: true
      APPLE_INS_PASSWORD:
        required: true
      APPLE_APP_SPECIFIC_PASSWORD:
        required: true

jobs:
  build-osx:
    runs-on: ${{ fromJson(format('["self-hosted","macOS", {0}]', inputs.runs-on)) }}
    permissions:
      contents: read
      actions: read
    outputs:
      version: ${{ steps.getversion.outputs.version }}
    env:
      DEFAULT_HOST: "keymaster.sec.cloud-support.purestorage.com"
      VERSION_FLAVOUR: "pure"
      CI_PROD: ${{ inputs.official }}
    steps:
    - uses: actions/setup-go@v5
      with:
        go-version: "1.22.x"

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Disable git safe directory warnings
      run: git config --global --add safe.directory '*'

    - run: |
        env GOOS=darwin GOARCH=arm64 CGO_ENABLED=1 make client-test build-client
        cp bin/keymaster bin/keymaster-arm64
        env GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 make client-test build-client
        cp bin/keymaster bin/keymaster-amd64
        lipo -create -output bin/keymaster bin/keymaster-arm64 bin/keymaster-amd64
        lipo -info bin/keymaster

    - name: Extract version number
      id: getversion
      run: |
        VERSION=$(awk '/^Version:/{print $2}' keymaster.spec | sed 's/-/_/')  
        VERSION_WITH_TYPE=$VERSION"${{ inputs.official && '' || '-SNAPSHOT' }}"
        echo "VERSION=$VERSION_WITH_TYPE" >> $GITHUB_ENV
        echo "version=$VERSION_WITH_TYPE" >> $GITHUB_OUTPUT

    - name: Create pkg installer
      run: |
        mkdir -p package
        cp bin/keymaster package
        pkgbuild \
          --root package \
          --identifier "${{ vars.APPLE_BUNDLE_ID }}" \
          --version "$VERSION" \
          --install-location /usr/local/bin \
          keymaster-unsigned.pkg
        cp keymaster-unsigned.pkg keymaster.pkg

    - uses: actions/upload-artifact@v4
      with:
        name: keymaster-osx
        path: bin/keymaster

    - uses: actions/upload-artifact@v4
      with:
        name: keymaster.pkg
        path: keymaster.pkg

  sign-osx:
    runs-on: [ self-hosted, macOS, p1sp ]
    needs:
      - build-osx
    environment: production
    if: inputs.official  # Only sign on the main branch
    permissions:
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4

      - name: Import Apple Certificate
        run: |
          date; pwd; id
          curl -o /tmp/apple_intermediate.cer ${{ vars.APPLE_ID_INTERMEDIATE_CERT_URL }}
          echo "${{ secrets.APPLE_DEV_P12_BASE64 }}" | base64 --decode > /tmp/certificate.p12
          echo "${{ secrets.APPLE_INS_P12_BASE64 }}" | base64 --decode > /tmp/ins-certificate.p12
          shasum -a256 /tmp/certificate.p12 /tmp/ins-certificate.p12 /tmp/apple_intermediate.cer

          security delete-keychain build.keychain || true
          security create-keychain -p "" build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security list-keychains -d user -s build.keychain
          ls -las ~/Library/Keychains

          security import /tmp/apple_intermediate.cer -k build.keychain
          security import /tmp/certificate.p12 -k build.keychain -P "${{ secrets.APPLE_DEV_PASSWORD }}" -T "/usr/bin/codesign"
          security import /tmp/ins-certificate.p12 -k build.keychain -P "${{ secrets.APPLE_INS_PASSWORD }}" -T "/usr/bin/codesign" -T /usr/bin/productsign
          security set-key-partition-list -S apple-tool:,apple:,codesign:,productsign: -s -k "" build.keychain

          security find-certificate -a -Z build.keychain
          security find-certificate -a -p build.keychain > allcerts.pem
          (openssl crl2pkcs7 -nocrl -certfile allcerts.pem | openssl pkcs7 -print_certs -noout) || true

          security find-certificate -c "${{ vars.APPLE_DEV_IDENTITY }}" -p build.keychain > mycert.pem
          openssl x509 -in mycert.pem -text -noout
          security verify-cert -v -k build.keychain -c mycert.pem || true
          security verify-cert -v -k build.keychain -c mycert.pem -p codeSign || true

          security find-identity -p codesigning build.keychain
          echo "Valid system identities"
          security find-identity

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: false

      - name: Postprocess artifacts
        run: |
          ls -lasR artifacts/ || true
          cp artifacts/keymaster-osx/keymaster keymaster 

      - name: Sign the application
        run: |
          codesign --sign "${{ vars.APPLE_DEV_IDENTITY }}" --keychain build.keychain --timestamp --options runtime --verbose=4 keymaster

      - name: Create pkg installer
        run: |
          mkdir -p package
          cp keymaster package
          pkgbuild \
            --root package \
            --identifier "${{ vars.APPLE_BUNDLE_ID }}" \
            --version "${{ needs.build-osx.outputs.version }}" \
            --install-location /usr/local/bin \
            keymaster-unsigned.pkg

      - name: Sign the installer
        run: |
          /bin/rm keymaster.pkg || true
          productsign --keychain build.keychain --timestamp --sign "${{ vars.APPLE_INS_IDENTITY }}" keymaster-unsigned.pkg keymaster.pkg || true

      - name: Notarize the application
        run: |
          xcrun notarytool submit --apple-id "${{ vars.APPLE_ID }}" --team-id "${{ vars.APPLE_TEAM_ID }}" --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" --wait --progress keymaster.pkg
          xcrun stapler staple -v keymaster.pkg || true

      - uses: actions/upload-artifact@v4
        with:
          name: keymaster-osx
          path: keymaster
          overwrite: true

      - uses: actions/upload-artifact@v4
        with:
          name: keymaster.pkg
          path: keymaster.pkg
          overwrite: true

      - name: Cleanup keychain
        if: always()
        run: |
          security delete-keychain build.keychain || true
          /bin/rm /tmp/certificate.p12 /tmp/ins-certificate.p12 /tmp/apple_intermediate.cer || true
